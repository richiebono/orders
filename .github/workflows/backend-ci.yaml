name: Build

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  test-backend:
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ./orders-backend/src/

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: Install SonarQube
      run: | 
             dotnet tool install --global dotnet-sonarscanner
             sudo update-ca-certificates
                   
    - name: Build with dotnet and SonarQube
      run: dotnet build ${{ env.WORKING_DIRECTORY }}Bono.Orders.sln --configuration Release /warnaserror -p:SonarQubeTargetsImported=true

    - name: Test with dotnet
      run: dotnet test ${{ env.WORKING_DIRECTORY }}Bono.Orders.sln --configuration Release /warnaserror -v=normal
  
  build-backend:   
    runs-on: ubuntu-latest
    needs: [test-backend]
    env:
      DOCKER_REPOSITORY: richiebono
      IMAGE_NAME: bono-orders-api
      IMAGE_TAG: ${{github.run_number}}
      WORKING_DIRECTORY: ./orders-backend/src/1-Api/Bono.Orders.Api/

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: QEMU
      uses: docker/setup-qemu-action@v1

    - name: Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ env.DOCKER_REPOSITORY }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker Image ${{ env.IMAGE_NAME }}
      run: docker build -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -t ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest .
      
    - name: Push Docker Image ${{ env.IMAGE_NAME }}
      run: docker push ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}
    
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: 'docker.io/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'MEDIUM,HIGH,CRITICAL'